name: Release

on:
  push:
    branches: [main]
    tags: ['v*']

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - run: npm ci
    - run: npm run build
    
    - name: Determine release type
      id: release
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Stable release triggered by tag push
          echo "type=stable" >> "$GITHUB_OUTPUT"
          echo "tag=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          echo "asset=datannur-app-latest.zip" >> "$GITHUB_OUTPUT"
          
          # Extract version from tag (remove 'v' prefix)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
        else
          # Automatic pre-release on push to main
          echo "type=prerelease" >> "$GITHUB_OUTPUT"
          echo "tag=pre-release" >> "$GITHUB_OUTPUT"
          echo "asset=datannur-app-pre-release.zip" >> "$GITHUB_OUTPUT"
        fi
    
    - name: Create package
      run: cd app && zip -r "../${{ steps.release.outputs.asset }}" .
    
    - name: Delete existing pre-release
      if: steps.release.outputs.type == 'prerelease'
      run: |
        gh release delete pre-release --yes || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update pre-release for stable releases  
      if: steps.release.outputs.type == 'stable'
      run: |
        echo "Updating pre-release to point to latest stable release"
        gh release delete pre-release --yes || true
        
        # Create pre-release package (copy from stable package)
        cp "${{ steps.release.outputs.asset }}" "datannur-app-pre-release.zip"
        
        # Create new pre-release pointing to same commit as stable
        gh release create pre-release \
          --title "datannur pre-release" \
          --notes "Latest development version (currently same as ${{ steps.release.outputs.tag }})" \
          --prerelease \
          "datannur-app-pre-release.zip"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract changelog
      id: changelog
      if: steps.release.outputs.type == 'stable'
      run: |
        VERSION="${{ steps.release.outputs.version }}"
        
        # Extract changelog section for this version
        awk "
        /^## ${VERSION} / { found=1; next }
        /^## / && found { exit }
        found { print }
        " CHANGELOG.md > changelog_section.md
        
        # Check if changelog was found
        if [ ! -s changelog_section.md ]; then
          echo "No changelog found for version ${VERSION}"
          echo "notes=" >> "$GITHUB_OUTPUT"
        else
          echo "Changelog found for version ${VERSION}"
          # Use multiline output format
          {
            echo "notes<<EOF"
            cat changelog_section.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
        fi

    - name: Create release
      run: |
        if [[ "${{ steps.release.outputs.type }}" == "stable" ]]; then
          # Create stable release
          if [[ "${{ steps.changelog.outputs.notes }}" != "" ]]; then
            # Use extracted changelog for stable releases
            gh release create "${{ steps.release.outputs.tag }}" \
              --title "datannur ${{ steps.release.outputs.tag }}" \
              --notes "${{ steps.changelog.outputs.notes }}" \
              "${{ steps.release.outputs.asset }}"
          else
            # Stable release without changelog
            gh release create "${{ steps.release.outputs.tag }}" \
              --title "datannur ${{ steps.release.outputs.tag }}" \
              --generate-notes \
              "${{ steps.release.outputs.asset }}"
          fi
        else
          # Create pre-release
          gh release create pre-release \
            --title "datannur pre-release" \
            --generate-notes \
            --prerelease \
            "${{ steps.release.outputs.asset }}"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
